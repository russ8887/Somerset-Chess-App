# Generated by Django 5.2.5 on 2025-10-29 08:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0038_add_fill_in_absent_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='CurriculumLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('FOUNDATION', 'Foundation (400-600 ELO)'), ('TACTICAL', 'Tactical Awareness (600-800 ELO)'), ('STRATEGIC', 'Strategic Thinking (800-1000 ELO)'), ('ADVANCED', 'Advanced Concepts (1000-1200 ELO)'), ('MASTERY', 'Mastery Path (1200+ ELO)')], max_length=20, unique=True)),
                ('description', models.TextField(help_text='Description of what students learn at this level')),
                ('min_elo', models.IntegerField(help_text='Minimum ELO for this level')),
                ('max_elo', models.IntegerField(help_text='Maximum ELO for this level')),
                ('sort_order', models.IntegerField(default=0, help_text='Order in which levels should be completed')),
            ],
            options={
                'verbose_name': 'Curriculum Level',
                'verbose_name_plural': 'Curriculum Levels',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='CurriculumTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Topic name (e.g., 'Rook Movement')", max_length=200)),
                ('category', models.CharField(help_text="Category (e.g., 'Piece Basics', 'Basic Tactics')", max_length=100)),
                ('sort_order', models.IntegerField(default=0, help_text='Order within the level')),
                ('learning_objective', models.TextField(help_text='What the student must understand/demonstrate')),
                ('teaching_method', models.TextField(help_text='Step-by-step instructions for coaches')),
                ('practice_activities', models.TextField(help_text='Hands-on exercises and games')),
                ('pass_criteria', models.TextField(help_text='Specific requirements to pass this topic')),
                ('enhancement_activities', models.TextField(blank=True, help_text='Extra activities for students who master quickly')),
                ('common_mistakes', models.TextField(blank=True, help_text='What coaches should watch out for')),
                ('estimated_time_min', models.IntegerField(default=15, help_text='Estimated time in minutes for average student')),
                ('estimated_time_max', models.IntegerField(default=30, help_text='Maximum time including enhancements')),
                ('elo_points', models.IntegerField(default=10, help_text='ELO points awarded for mastering this topic')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this topic is currently used')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='scheduler.curriculumlevel')),
            ],
            options={
                'verbose_name': 'Curriculum Topic',
                'verbose_name_plural': 'Curriculum Topics',
                'ordering': ['level__sort_order', 'sort_order'],
                'unique_together': {('level', 'name')},
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('IN_PROGRESS', 'In Progress'), ('MASTERED', 'Mastered'), ('NEEDS_REVIEW', 'Needs Review'), ('FAILED', 'Failed Assessment')], default='NOT_STARTED', max_length=20)),
                ('attempts', models.IntegerField(default=0, help_text='Number of times this topic has been attempted')),
                ('mastery_date', models.DateField(blank=True, help_text='Date when topic was mastered', null=True)),
                ('last_attempted_date', models.DateField(blank=True, null=True)),
                ('coach_notes', models.TextField(blank=True, help_text='Coach observations and notes')),
                ('pass_percentage', models.IntegerField(blank=True, help_text='Percentage score on assessment (0-100)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_lesson_session', models.ForeignKey(blank=True, help_text='Last lesson where this topic was worked on', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.lessonsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_progress', to='scheduler.student')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='scheduler.curriculumtopic')),
            ],
            options={
                'verbose_name': 'Student Progress',
                'verbose_name_plural': 'Student Progress',
                'ordering': ['topic__level__sort_order', 'topic__sort_order'],
                'unique_together': {('student', 'topic')},
            },
        ),
        migrations.CreateModel(
            name='RecapSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_interval', models.IntegerField(default=4, help_text='Current interval between recaps')),
                ('next_recap_lesson', models.IntegerField(help_text='Lesson number when recap is due')),
                ('total_recaps', models.IntegerField(default=0, help_text='Total number of recaps completed')),
                ('successful_recaps', models.IntegerField(default=0, help_text='Number of successful recaps')),
                ('last_recap_date', models.DateField(blank=True, null=True)),
                ('last_recap_result', models.CharField(blank=True, choices=[('PASS', 'Passed'), ('REVIEW', 'Needs Review'), ('FAIL', 'Failed')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('progress', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recap_schedule', to='scheduler.studentprogress')),
            ],
            options={
                'verbose_name': 'Recap Schedule',
                'verbose_name_plural': 'Recap Schedules',
            },
        ),
        migrations.CreateModel(
            name='TopicPrerequisite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_strict', models.BooleanField(default=True, help_text="If True, prerequisite MUST be completed. If False, it's just recommended.")),
                ('prerequisite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocks', to='scheduler.curriculumtopic')),
                ('required_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prerequisites', to='scheduler.curriculumtopic')),
            ],
            options={
                'verbose_name': 'Topic Prerequisite',
                'verbose_name_plural': 'Topic Prerequisites',
                'unique_together': {('prerequisite', 'required_for')},
            },
        ),
    ]
